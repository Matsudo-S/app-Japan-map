// GeoJSONデータを処理するユーティリティ

// 緯度経度からSVG座標に変換する関数
export const convertLatLngToSVG = (lng, lat, bounds, svgWidth = 450, svgHeight = 500, prefName = '') => {
  // 沖縄の位置を特別に調整（接続線と枠と同じ位置に配置）
  if (prefName === '沖縄県') {
    // 接続線と枠と同じ位置に配置（利便性のため）
    const okinawaX = 380; // 枠のX位置と同じ（450×500に合わせて調整）
    const okinawaY = 250; // 枠のY位置と同じ
    
    // 沖縄内での相対位置を計算（縮小スケール）
    const okinawaScale = 0.15;
    const relativeX = ((lng - 123.0) / (131.0 - 123.0)) * 40 * okinawaScale;
    const relativeY = ((27.0 - lat) / (27.0 - 24.0)) * 30 * okinawaScale;
    
    return { 
      x: okinawaX + relativeX, 
      y: okinawaY + relativeY 
    };
  }
  
  // 他の都道府県は通常の変換
  const x = ((lng - bounds.minLng) / (bounds.maxLng - bounds.minLng)) * svgWidth;
  const y = svgHeight - ((lat - bounds.minLat) / (bounds.maxLat - bounds.minLat)) * svgHeight;
  
  // デバッグ用：九州エリアの座標を確認
  if (prefName && ['福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県'].includes(prefName)) {
    console.log(`${prefName}: lng=${lng}, lat=${lat}, x=${x}, y=${y}`);
  }
  
  return { x, y };
};

// GeoJSONの座標配列をSVGパスに変換する関数
export const coordinatesToSVGPath = (coordinates, bounds, prefName = '') => {
  if (!coordinates || coordinates.length === 0) return '';
  
  let path = '';
  
  // MultiPolygonの場合、最初のPolygonを使用
  const polygons = coordinates[0] || coordinates;
  
  if (Array.isArray(polygons[0]) && Array.isArray(polygons[0][0])) {
    // 複数のリングがある場合、外側のリングのみを使用
    const outerRing = polygons[0];
    
    // デバッグ用：九州エリアの座標数を確認
    if (['福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '徳島県', '香川県', '愛媛県', '高知県', '沖縄県'].includes(prefName)) {
      console.log(`${prefName} coordinates count:`, outerRing.length);
    }
    
    // 座標数が少ない場合の処理を改善
    if (outerRing.length < 10) {
      console.warn(`${prefName}: 座標数が少なすぎます (${outerRing.length}個)`);
      
      if (outerRing.length >= 3) {
        // 既存の座標を使用してパスを作成
        outerRing.forEach((coord, index) => {
          const [lng, lat] = coord;
          const { x, y } = convertLatLngToSVG(lng, lat, bounds, 450, 500, prefName);
          
          if (index === 0) {
            path += `M${x.toFixed(2)},${y.toFixed(2)}`;
          } else {
            path += ` L${x.toFixed(2)},${y.toFixed(2)}`;
          }
        });
        path += ' Z';
      } else if (outerRing.length > 0) {
        // 座標が3個未満の場合は、都道府県の中心位置に小さな円を描画
        const centerCoord = outerRing[0];
        const [lng, lat] = centerCoord;
        const { x, y } = convertLatLngToSVG(lng, lat, bounds, 450, 500, prefName);
        const radius = 8; // 小さな円の半径
        
        path = `M${(x - radius).toFixed(2)},${y.toFixed(2)} A${radius},${radius} 0 1,1 ${(x + radius).toFixed(2)},${y.toFixed(2)} A${radius},${radius} 0 1,1 ${(x - radius).toFixed(2)},${y.toFixed(2)} Z`;
      }
    } else {
      // 通常の処理（座標数が十分な場合）
      outerRing.forEach((coord, index) => {
        const [lng, lat] = coord;
        const { x, y } = convertLatLngToSVG(lng, lat, bounds, 450, 500, prefName);
        
        if (index === 0) {
          path += `M${x.toFixed(2)},${y.toFixed(2)}`;
        } else {
          path += ` L${x.toFixed(2)},${y.toFixed(2)}`;
        }
      });
      
      path += ' Z';
    }
  }
  
  return path;
};

// 日本全体の緯度経度の境界を取得
export const getJapanBounds = () => ({
  minLat: 24.0,
  maxLat: 46.0,
  minLng: 123.0,
  maxLng: 146.0
});

// 不足している都道府県の座標データを補完する関数
const getFallbackCoordinates = (prefName) => {
  const fallbackData = {
    // 四国地方 - より詳細な座標で実際の形状に近づける
    '徳島県': [
      [134.0, 34.0], [134.1, 34.0], [134.2, 34.0], [134.3, 34.0], [134.4, 34.0], 
      [134.4, 33.9], [134.4, 33.8], [134.3, 33.8], [134.2, 33.8], [134.1, 33.8], 
      [134.0, 33.8], [133.9, 33.8], [133.9, 33.9], [133.9, 34.0], [134.0, 34.0]
    ],
    '香川県': [
      [133.8, 34.3], [133.9, 34.3], [134.0, 34.3], [134.1, 34.3], [134.2, 34.3], 
      [134.2, 34.2], [134.2, 34.1], [134.2, 34.0], [134.1, 34.0], [134.0, 34.0], 
      [133.9, 34.0], [133.8, 34.0], [133.8, 34.1], [133.8, 34.2], [133.8, 34.3]
    ],
    '愛媛県': [
      [132.5, 34.0], [132.6, 34.0], [132.7, 34.0], [132.8, 34.0], [132.9, 34.0], 
      [133.0, 34.0], [133.1, 34.0], [133.2, 34.0], [133.2, 33.9], [133.2, 33.8], 
      [133.2, 33.7], [133.2, 33.6], [133.1, 33.6], [133.0, 33.6], [132.9, 33.6], 
      [132.8, 33.6], [132.7, 33.6], [132.6, 33.6], [132.5, 33.6], [132.5, 33.7], 
      [132.5, 33.8], [132.5, 33.9], [132.5, 34.0]
    ],
    '高知県': [
      [133.0, 33.6], [133.1, 33.6], [133.2, 33.6], [133.3, 33.6], [133.4, 33.6], 
      [133.5, 33.6], [133.5, 33.5], [133.5, 33.4], [133.5, 33.3], [133.5, 33.2], 
      [133.4, 33.2], [133.3, 33.2], [133.2, 33.2], [133.1, 33.2], [133.0, 33.2], 
      [132.9, 33.2], [132.9, 33.3], [132.9, 33.4], [132.9, 33.5], [132.9, 33.6], 
      [133.0, 33.6]
    ],
    
    // 九州地方 - より詳細な座標で実際の形状に近づける
    '福岡県': [
      [130.3, 33.6], [130.4, 33.6], [130.5, 33.6], [130.6, 33.6], [130.7, 33.6], 
      [130.8, 33.6], [130.9, 33.6], [130.9, 33.5], [130.9, 33.4], [130.8, 33.4], 
      [130.7, 33.4], [130.6, 33.4], [130.5, 33.4], [130.4, 33.4], [130.3, 33.4], 
      [130.2, 33.4], [130.2, 33.5], [130.2, 33.6], [130.3, 33.6]
    ],
    '佐賀県': [
      [130.1, 33.4], [130.2, 33.4], [130.3, 33.4], [130.4, 33.4], [130.5, 33.4], 
      [130.6, 33.4], [130.6, 33.3], [130.6, 33.2], [130.5, 33.2], [130.4, 33.2], 
      [130.3, 33.2], [130.2, 33.2], [130.1, 33.2], [130.0, 33.2], [130.0, 33.3], 
      [130.0, 33.4], [130.1, 33.4]
    ],
    '長崎県': [
      [129.5, 33.2], [129.6, 33.2], [129.7, 33.2], [129.8, 33.2], [129.9, 33.2], 
      [130.0, 33.2], [130.1, 33.2], [130.2, 33.2], [130.3, 33.2], [130.4, 33.2], 
      [130.4, 33.1], [130.4, 33.0], [130.4, 32.9], [130.4, 32.8], [130.3, 32.8], 
      [130.2, 32.8], [130.1, 32.8], [130.0, 32.8], [129.9, 32.8], [129.8, 32.8], 
      [129.7, 32.8], [129.6, 32.8], [129.5, 32.8], [129.5, 32.9], [129.5, 33.0], 
      [129.5, 33.1], [129.5, 33.2]
    ],
    '熊本県': [
      [130.5, 33.0], [130.6, 33.0], [130.7, 33.0], [130.8, 33.0], [130.9, 33.0], 
      [131.0, 33.0], [131.1, 33.0], [131.1, 32.9], [131.1, 32.8], [131.1, 32.7], 
      [131.1, 32.6], [131.0, 32.6], [130.9, 32.6], [130.8, 32.6], [130.7, 32.6], 
      [130.6, 32.6], [130.5, 32.6], [130.4, 32.6], [130.4, 32.7], [130.4, 32.8], 
      [130.4, 32.9], [130.4, 33.0], [130.5, 33.0]
    ],
    '大分県': [
      [131.0, 33.4], [131.1, 33.4], [131.2, 33.4], [131.3, 33.4], [131.4, 33.4], 
      [131.5, 33.4], [131.5, 33.3], [131.5, 33.2], [131.5, 33.1], [131.5, 33.0], 
      [131.4, 33.0], [131.3, 33.0], [131.2, 33.0], [131.1, 33.0], [131.0, 33.0], 
      [130.9, 33.0], [130.9, 33.1], [130.9, 33.2], [130.9, 33.3], [130.9, 33.4], 
      [131.0, 33.4]
    ],
    '宮崎県': [
      [131.2, 32.8], [131.3, 32.8], [131.4, 32.8], [131.5, 32.8], [131.6, 32.8], 
      [131.7, 32.8], [131.7, 32.7], [131.7, 32.6], [131.7, 32.5], [131.7, 32.4], 
      [131.6, 32.4], [131.5, 32.4], [131.4, 32.4], [131.3, 32.4], [131.2, 32.4], 
      [131.1, 32.4], [131.1, 32.5], [131.1, 32.6], [131.1, 32.7], [131.1, 32.8], 
      [131.2, 32.8]
    ],
    '鹿児島県': [
      [130.3, 32.4], [130.4, 32.4], [130.5, 32.4], [130.6, 32.4], [130.7, 32.4], 
      [130.8, 32.4], [130.9, 32.4], [131.0, 32.4], [131.1, 32.4], [131.1, 32.3], 
      [131.1, 32.2], [131.1, 32.1], [131.1, 32.0], [131.1, 31.9], [131.1, 31.8], 
      [131.0, 31.8], [130.9, 31.8], [130.8, 31.8], [130.7, 31.8], [130.6, 31.8], 
      [130.5, 31.8], [130.4, 31.8], [130.3, 31.8], [130.2, 31.8], [130.2, 31.9], 
      [130.2, 32.0], [130.2, 32.1], [130.2, 32.2], [130.2, 32.3], [130.2, 32.4], 
      [130.3, 32.4]
    ],
    
    // 沖縄県（より詳細な座標で実際の形状に近づける）
    '沖縄県': [
      [127.6, 26.5], [127.7, 26.5], [127.8, 26.5], [127.9, 26.5], [128.0, 26.5], 
      [128.1, 26.5], [128.2, 26.5], [128.3, 26.5], [128.3, 26.4], [128.3, 26.3], 
      [128.2, 26.3], [128.1, 26.3], [128.0, 26.3], [127.9, 26.3], [127.8, 26.3], 
      [127.7, 26.3], [127.6, 26.3], [127.5, 26.3], [127.5, 26.4], [127.5, 26.5], 
      [127.6, 26.5]
    ]
  };
  
  return fallbackData[prefName] || null;
};

// GeoJSONファイルをロードして処理する関数
export const loadAndProcessGeoJSON = async () => {
  try {
    const response = await fetch('/prefectures.geojson');
    const geojsonData = await response.json();
    
    const bounds = getJapanBounds();
    const processedData = {};
    
    geojsonData.features.forEach(feature => {
      const prefName = feature.properties.name;
      const coordinates = feature.geometry.coordinates;
      
      let svgPath = coordinatesToSVGPath(coordinates, bounds, prefName);
      
      // 座標数が少ない場合、フォールバックデータを使用
      if (svgPath === '' || svgPath.includes('A8,8')) {
        const fallbackCoords = getFallbackCoordinates(prefName);
        if (fallbackCoords) {
          console.log(`${prefName}: フォールバック座標データを使用`);
          svgPath = coordinatesToSVGPath([fallbackCoords], bounds, prefName);
        }
      }
      
      // デバッグ用：九州エリアのSVGパスを確認
      if (['福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '徳島県', '香川県', '愛媛県', '高知県', '沖縄県'].includes(prefName)) {
        console.log(`${prefName} SVG Path:`, svgPath);
      }
      
      processedData[prefName] = {
        id: feature.properties.name.toLowerCase().replace(/[県府都道]/g, ''),
        name: prefName,
        path: svgPath,
        color: getColorForPrefecture(prefName)
      };
    });
    
    return processedData;
  } catch (error) {
    console.error('GeoJSONファイルの読み込みに失敗しました:', error);
    return null;
  }
};

// 都道府県に応じた色を設定する関数
const getColorForPrefecture = (prefName) => {
  // 地方単位での色分け（地域別色分けと同じ）
  const regionColorMap = {
    // 北海道 - #8AA624
    '北海道': '#8AA624',
    
    // 東北 - #DBE4C9
    '青森県': '#DBE4C9',
    '岩手県': '#DBE4C9',
    '宮城県': '#DBE4C9',
    '秋田県': '#DBE4C9',
    '山形県': '#DBE4C9',
    '福島県': '#DBE4C9',
    
    // 関東 - #FFFFF0
    '茨城県': '#FFFFF0',
    '栃木県': '#FFFFF0',
    '群馬県': '#FFFFF0',
    '埼玉県': '#FFFFF0',
    '千葉県': '#FFFFF0',
    '東京都': '#FFFFF0',
    '神奈川県': '#FFFFF0',
    
    // 中部 - #FEA405
    '新潟県': '#FEA405',
    '富山県': '#FEA405',
    '石川県': '#FEA405',
    '福井県': '#FEA405',
    '山梨県': '#FEA405',
    '長野県': '#FEA405',
    '岐阜県': '#FEA405',
    '静岡県': '#FEA405',
    '愛知県': '#FEA405',
    
    // 関西 - #8AA624
    '三重県': '#8AA624',
    '滋賀県': '#8AA624',
    '京都府': '#8AA624',
    '大阪府': '#8AA624',
    '兵庫県': '#8AA624',
    '奈良県': '#8AA624',
    '和歌山県': '#8AA624',
    
    // 中国 - #DBE4C9
    '鳥取県': '#DBE4C9',
    '島根県': '#DBE4C9',
    '岡山県': '#DBE4C9',
    '広島県': '#DBE4C9',
    '山口県': '#DBE4C9',
    
    // 四国 - #FFFFF0
    '徳島県': '#FFFFF0',
    '香川県': '#FFFFF0',
    '愛媛県': '#FFFFF0',
    '高知県': '#FFFFF0',
    
    // 九州 - #FEA405
    '福岡県': '#FEA405',
    '佐賀県': '#FEA405',
    '長崎県': '#FEA405',
    '熊本県': '#FEA405',
    '大分県': '#FEA405',
    '宮崎県': '#FEA405',
    '鹿児島県': '#FEA405',
    
    // 沖縄 - #8AA624
    '沖縄県': '#8AA624'
  };
  
  return regionColorMap[prefName] || '#8AA624';
};
